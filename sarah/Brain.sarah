<?php namespace sarah;
	/*
	 * Sarah Brain, contructed with input processor
	*/
	class Brain {
		private $processor;
		
		function __construct($components){
			global $_config;
			$this->processor = $components["processor"];
		}

		//take input, decide what to do with it
		public function process($input){
			$finalInput = $this->processor->language->purify($input);
			$sentence = $this->processor->language->getSentence($finalInput);
			$answer = "idk";
			if($sentence->isQuestion) {
				$answer = $this->processor->answerQuestion($sentence);
			} else {
				$output = new \sarah\Processor\Output();
				$output->digest($input);
				$answer = $output->conclude();
			}
			return $answer;
		}

		

		

		
		

		/*
		public function askRandom() {
			global $dbk;
			$query = $dbk->prepare("SELECT * FROM Questions");
			$query->execute();

			$results = $query->fetchAll();
			$questions = array();
			foreach($results as $result) {
				if($result["askValidation"]) {
					$validation = create_function('',$result["askValidation"]);
					if(!$validation()) continue;
				}
				$questions[] = $result["question"];
			}
			if(count($questions) > 0) {
				$randomChoice = array_rand($questions);

				return $this->ask($questions[$randomChoice]);
			} else {
				return $this->responseToAnswer();
			}
		}

		

		

		public function ask($question){
			global $dbk;
			global $userid;
			$questionQuery = $dbk->prepare("SELECT * FROM questions WHERE question=?");
			$questionQuery->bindParam(1, $question);
			$questionQuery->execute();

			if($questionQuery->rowCount() < 1) {
				return "";
			}

			$q = $questionQuery->fetch();
			if($q["askValidation"]) {
				$validation = create_function('$question',$q["askValidation"]);
				if(!$validation($question)) return "";
			}

			$query1 = $dbk->prepare("UPDATE users SET askingQuestion = ? WHERE uid=?");
			$query1->bindParam(1, $question);
			$query1->bindParam(2, $userid);
			$query1->execute();

			$query2 = $dbk->prepare("SELECT * FROM questionAlias WHERE question=?");
			$query2->bindParam(1, $question);
			$query2->execute();

			$questionAlias = array();

			while($result = $query2->fetch()) {
				$questionAlias[] = $result["alias"];
			}

			$randomChoice = array_rand($questionAlias);
			return $questionAlias[$randomChoice];
		}


		private function responseToAnswer() {
			return $this->express("end_convo");
		}

		*/
		
	}